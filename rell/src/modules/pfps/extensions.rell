@extend(yours.external.on_external_update)
function on_external_update(token: yours.token, attributes: map<text, gtv>) {
  log("on_external_update", token.collection.name);
  when (token.collection.name) {
    "Pudgy Penguins" -> _create_pfp(token, attributes);
    "Lil Pudgys" -> _create_pfp(token, attributes);
    "Mocaverse" -> _create_pfp(token, attributes);
    "Azuki" -> _create_pfp(token, attributes);
    else -> return;
  }
}

@extend(yours.after_mint)
function on_after_mint(token: yours.token, to: ft4.accounts.account, amount: big_integer) {
  val pfp = pfp @? { token };
  if (pfp != null) {
    _equip_pfp(pfp, to);
  }
}

@extend(yours.after_transfer)
function on_transfer(token: yours.token, from: ft4.accounts.account, to: ft4.accounts.account, amount: big_integer) {
  val pfp = pfp @? { token };
  if (pfp != null) {
    _unequip_pfp(pfp, from);
    _equip_pfp(pfp, to);
  }
}

@extend(yours.populate_metadata)
function populate_metadata(yours.token, modules: set<name>): map<text, gtv> {
  val metadata = map<text, gtv>();
  if (not modules.contains("pfps")) return metadata;

  val pfp = pfp @? { token };
  if (pfp == null) return metadata;

  val model = model @? { pfp } ( .url );
  if (model != null) {
    metadata.put("model", model.to_gtv());
  }

  return metadata;
}

function _create_pfp(token: yours.token, attributes: map<text, gtv>) {
  yours.attach_module(token, rell.meta(pfp).module_name);
  val pfp = pfp @? { token };
  if (pfp == null) {
    log("create_pfp", token.collection.name);
    val description_gtv = attributes.get_or_null("description");
    val description = if (description_gtv != null) text.from_gtv(description_gtv) else "";

    val image_gtv = attributes.get_or_null("image");
    val image = if (image_gtv != null) text.from_gtv(image_gtv) else "";
    create pfp ( token, description, image );
  }
}

function _unequip_pfp(pfp, account: ft4.accounts.account) {
  val equipped_pfp = equipped_pfp @? { account, pfp };
  if (equipped_pfp != null) {
    delete equipped_pfp;
    on_unequip(pfp);
  }
}

function _equip_pfp(pfp, account: ft4.accounts.account) {
  if (equipped_pfp @? { account } != null) {
    // Already equips a PFP
    return;
  }
  create equipped_pfp ( account, pfp );
  on_equip(pfp);
}
