query get_token_balances(account_id: byte_array, page_size: integer?, page_cursor: text?): paged_result {
  var before_rowid: rowid? = null;
  if (page_cursor??) {
    val cursor = decode_cursor(page_cursor);
    before_rowid = cursor.before_rowid;
  }

  val paginated_token_balances = token_balance @* {
    .account.id == account_id,
    if (before_rowid??) (.rowid < before_rowid) else true
  } (
    @omit @sort_desc $,
    pagination_result (
      rowid = $.rowid,
      data = token_balance_dto(
      project = project_info(.token.collection.project.name, .token.collection.project.blockchain_rid),
      collection = .token.collection.name,
      token_id = .token.id,
      uid = .token.uid,
      type = .token.type.name,
      amount = .amount
      ).to_gtv_pretty(),
    )
  ) limit fetch_data_size(page_size);
  return make_page(paginated_token_balances, page_size);
}

/**
 * Returns the metadata of all modules the token has been used within.
 *
 * @param project_name the project name
 * @param project_blockchain_rid the project blockchain rid
 * @param collection the collection name
 * @param token_id the token id
 * @return The metadata of the token in JSON format in order to handle generic attributes values.
 */
query metadata(
  project_name: name,
  project_blockchain_rid: byte_array,
  collection: name,
  token_id: big_integer
): token_metadata_outgoing? {
  val token = get_token(project_name, project_blockchain_rid, collection, token_id);
  return if (token != null) get_metadata(token) else null;
}

query metadata_by_uid(uid: byte_array): token_metadata_outgoing? {
  val token = get_active_token_by_uid(uid);
  return if (token != null) get_metadata(token) else null;
}

/**
 * Returns the balance of the token for the given account.
 *
 * @param account_id of the account to get the balance for
 * @param project_name of the token to get the balance for
 * @param project_blockchain_rid of the token to get the balance for
 * @param collection of the token to get the balance for
 * @param token_id of the token to get the balance for
 * @return The balance of the token for the given account
 */
query balance(account_id: byte_array, project_name: name, project_blockchain_rid: byte_array, collection: name, token_id: big_integer): big_integer {
  val token = get_active_token(project_name, project_blockchain_rid, collection, token_id);
  if (token == null) return 0;

  val account = ft4.accounts.account @? { account_id };
  if (account == null) return 0;

  return get_balance(token, account);
}

/**
 * Returns the balance of the token for the given account by its unique id.
 *
 * @param uid the unique id
 * @param account_id the account id
 * @return The balance of the token for the given account
 */
query balance_by_uid(account_id: byte_array, uid: byte_array): big_integer {
  val token = get_active_token_by_uid(uid);
  if (token == null) return 0;

  val account = ft4.accounts.account @? { account_id };
  if (account == null) return 0;

  return get_balance(token, account);
}

/**
 * Returns the list of all projects.
 *
 * @return The list of all projects
 */
query projects(page_size: integer?, page_cursor: text?): paged_result {
  var before_rowid: rowid? = null;
  if (page_cursor??) {
    val cursor = decode_cursor(page_cursor);
    before_rowid = cursor.before_rowid;
  }

  val paginated_projects = project @* {
    if (before_rowid??) (.rowid < before_rowid) else true
  } (
    @omit @sort_desc $,
    pagination_result (
      data = .name.to_gtv_pretty(),
      rowid = .rowid
    )
  ) limit fetch_data_size(page_size);
  return make_page(paginated_projects, page_size);
}

/**
 * Returns the list of all collections for the given project.
 *
 * @param project of the collections to get
 * @return The list of all collections for the given project
 */
query collections(project: name, page_size: integer?, page_cursor: text?): paged_result {
  var before_rowid: rowid? = null;
  if (page_cursor??) {
    val cursor = decode_cursor(page_cursor);
    before_rowid = cursor.before_rowid;
  }

  val paginated_collections = collection @* {
    .project.name == project,
    if (before_rowid??) (.rowid < before_rowid) else true
  } (
    @omit @sort_desc $,
    pagination_result (
      data = .name.to_gtv_pretty(),
      rowid = .rowid
    )
  ) limit fetch_data_size(page_size);

  return make_page(paginated_collections, page_size);
}

/**
 * Returns the list of transfers for the given account.
 *
 * @param account_id the account id
 * @param type the transfer type
 * @return The list of transfers for the given account
 */
query get_transfer_history(account_id: byte_array, type: transfer_type?, page_size: integer?, page_cursor: text?) {
  val account = ft4.accounts.account @? { account_id };
  if (empty(account)) return null;

  val paginated_transfers = get_paginated_transfers(
    account = account,
    token = null,
    type = type,
    height = null,
    page_size = page_size,
    page_cursor = page_cursor
  );
  return make_page(paginated_transfers, page_size);
}

/**
 * Returns the list of transfers for the given token.
 *
 * @param height the height
 * @param token_uid the token uid
 * @return The list of transfers for the given token
 */
query get_transfer_history_from_height(height: integer, token_uid: byte_array?, page_size: integer?, page_cursor: text?) {
  val token = if (token_uid != null) get_token_by_uid(token_uid) else null;

  val paginated_transfers = get_paginated_transfers(
    account = null,
    token = token,
    type = null,
    height = height,
    page_size = page_size,
    page_cursor = page_cursor
  );
  return make_page(paginated_transfers, page_size);
}

/**
 * Returns the transfer history entry for the given rowid.
 *
 * @param rowid the rowid
 * @return The transfer history entry for the given rowid
 */
query get_transfer_history_entry(rowid) {
  val entry = transfer_history_entry @? { .rowid == rowid };
  return if (empty(entry)) null else extract_data_from_transfer_history_entry(entry);
}

query get_my_tokens_with_modules(account_id: byte_array, modules: list<name>) {
  val tokens = set(
    (tb: token_balance, tm: token_module) @* {
      tb.account.id == account_id and
    tb.token == tm.token and
    tm.module_name in modules
    } ( tb.token )
  );
  return tokens @* { } (
    token_uid = $.uid,
    metadata = populate_metadata ($, set(modules))
  );
}
