@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_overridable_auth_handler(
    scope = rell.meta(init_transfer).mount_name,
    flags = ["T"]
  );

/**
 * This operation initializes the transfer metadata for a token transfer.
 * It is executed on the source blockchain that you want to transfer the
 * token away from.
 *
 * It is an extension of the FT4 ICCF flow and the purpose is to
 * pass (the correct) metadata of tokens to the target chain.
 *
 * @param metadata The metadata to be initialized for the transfer. Expected to be in `gtv_pretty` format.
 */
operation init_transfer(
  target_blockchain_rid: byte_array,
  recipient_id: byte_array,
  token_id: big_integer,
  amount: big_integer,
  metadata: token_metadata_incoming
) {
  val account = ft4.auth.authenticate();

  val project_info = metadata.yours.project;
  require(project @? { .name == project_info.name, .blockchain_rid == project_info.blockchain_rid } != null, "Invalid project");

  val collection = metadata.yours.collection;

  val token = require(get_token(project_info.name, project_info.blockchain_rid, collection, token_id), "Token Not Found");

  val balance = get_balance(token, account);
  require(balance >= amount, "Insufficient balance %s/%s".format(balance, amount));

  val existing_metadata = get_metadata(token);
  _validate_metadata(metadata, existing_metadata);

  before_init_transfer(token, account);

  _burn(token, balance_info(account, amount), target_blockchain_rid);

  create pending_transfer (
    sender = account,
    transaction = op_context.transaction,
    op_index = op_context.op_index
  );

  after_init_transfer(token, account);
}

function _validate_metadata(incoming: token_metadata_incoming, outgoing: token_metadata_outgoing) {
  require(incoming.name == outgoing.name, "Invalid Metadata");
  _validate_properties(incoming, outgoing);
}

function _validate_properties(incoming: token_metadata_incoming, outgoing: token_metadata_outgoing) {
  val incoming_properties = _json_to_gtv_map(incoming.properties);
  val outgoing_properties = outgoing.properties;
  for (name in incoming_properties.keys()) {
    val incoming_value = incoming_properties[name];
    val outgoing_value = outgoing_properties[name];

    if (incoming_value != outgoing_value) {
      require(incoming_value == outgoing_value, "Invalid Metadata");
    }
  }
}

/**
 * This operation applies the transfer metadata to a token transfer.
 * It is executed against the target blockchain where you want the
 * token to be imported into.
 */
operation apply_transfer(
  init_transfer_tx: gtx_transaction,
  init_tx_op_index: integer
) {
  val (init_transfer_details, crosschain_source_blockchain_rid) = _validate_apply_transfer(
    init_transfer_tx,
    init_tx_op_index
  );

  require(init_transfer_details.args.target_blockchain_rid == chain_context.blockchain_rid, "Invalid target blockchain");

  // Add transfer to applied transfers table so that it cannot be applied more than once
  create applied_transfers (
    init_tx_rid = init_transfer_details.tx_rid,
    init_op_index = init_tx_op_index,
    transaction = op_context.transaction,
    op_index = op_context.op_index
  );

  val transferred_metadata = init_transfer_details.args.metadata;
  var token = get_token(
    transferred_metadata.yours.project.name,
    transferred_metadata.yours.project.blockchain_rid,
    transferred_metadata.yours.collection,
    init_transfer_details.args.token_id
  );

  val inc_token_type = token_type.value(transferred_metadata.yours.type);

  if (token == null) {
    require(inc_token_type == token_type.yours, "Only a yours token may be created during a crosschain transfer");
    token = create_token_with_id(
      token_info(
        project = transferred_metadata.yours.project,
        collection = transferred_metadata.yours.collection,
        type = inc_token_type,
        name = transferred_metadata.name,
        modules = transferred_metadata.yours.modules
      ),
      init_transfer_details.args.token_id
    );
  } else {
    token.type = inc_token_type;
  }

  _apply_transfer(
    init_transfer_details.args.recipient_id,
    token,
    init_transfer_details.args.amount,
    crosschain_source_blockchain_rid,
    transferred_metadata
  );

  _ensure_visited_blockchains(token, transferred_metadata.yours.blockchains);
}

/**
 * This operation completes the transfer by deleting the pending transfer from the
 * applied_transfers table.
 * 
 * This operation is for bookkeeping purposes and it is not the end of the world
 * if it is not executed.
 * 
 * The worst case scenario is that the user will believe that they have an additional
 * transfer to complete, but when they try to complete it, it will fail because
 * the transfer has already been completed.
 */
operation complete_transfer(
  final_apply_transfer_tx: gtx_transaction,
  op_index: integer
) {
  require(
    final_apply_transfer_tx.body.operations[op_index].name == rell.meta(apply_transfer).mount_name,
    "Operation at op_index was not apply_transfer"
  );

  val final_apply_transfer_args = struct<apply_transfer>
    .from_gtv(
      final_apply_transfer_tx
        .body
        .operations[op_index]
        .args
        .to_gtv()
    );

  val init_transfer_tx_hash = final_apply_transfer_args.init_transfer_tx.to_gtv().hash();

  iccf.require_valid_proof(
    final_apply_transfer_tx,
    require_anchored_proof = true,
    verify_signers = false
  );

  delete pending_transfer @ {
    .transaction
    .tx_hash == init_transfer_tx_hash,
    .op_index == final_apply_transfer_args
    .init_tx_op_index
  };
}

function _apply_transfer(account_id: byte_array, token, amount: big_integer, crosschain_source_blockchain_rid: byte_array, token_metadata: token_metadata_incoming) {
  _mint(token, balance_info(ft4.accounts.account @ { account_id }, amount), crosschain_source_blockchain_rid);
  _apply_common_metadata(token, token_metadata);

  val attributes = _json_to_gtv_map(token_metadata.properties);
  _import_attributes(token, attributes);
  after_apply_transfer(token, set(token_metadata.yours.modules), attributes);
}

function _apply_common_metadata(token, metadata: token_metadata_incoming) {
  attach_modules(token, metadata.yours.modules);
}

function _validate_apply_transfer(
  init_transfer_tx: gtx_transaction,
  init_tx_op_index: integer
) {
  val init_transfer_details = _get_init_transfer_details(init_transfer_tx, init_tx_op_index);

  require(
    applied_transfers @? {
      .init_tx_rid == init_transfer_details.tx_rid,
      .init_op_index == init_tx_op_index
    } == null,
    "Transaction <%s> transfer at index <%s> has already been applied on this chain."
      .format(init_transfer_details.tx_rid, init_tx_op_index)
  );

  require(
    canceled_transfers @? { init_transfer_details.tx_rid, init_tx_op_index } == null,
    "Transaction <%s> transfer at index <%s> has already been canceled on this chain."
      .format(init_transfer_details.tx_rid, init_tx_op_index)
  );

  require(
    unapplied_transfers @? { init_transfer_details.tx_rid, init_tx_op_index } == null,
    "Transaction <%s> transfer at index <%s> has already been unapplied on this chain."
      .format(init_transfer_details.tx_rid, init_tx_op_index)
  );

  iccf.require_valid_proof(
    init_transfer_tx,
    require_anchored_proof = true,
    verify_signers = false
  );

  return (init_transfer_details, init_transfer_tx.body.blockchain_rid);
}

function _get_init_transfer_details(tx: gtx_transaction, op_index: integer) {
  val op = tx.body.operations[op_index];

  require(
    op.name == rell.meta(init_transfer).mount_name,
    "Invalid parameters. Expected <%s> at index <%d>, found <%s>"
      .format(rell.meta(init_transfer).mount_name, op_index, op.name)
  );

  val tx_rid = tx.body.hash();
  val args = struct<init_transfer>.from_gtv(op.args.to_gtv());

  val auth_op = tx.body.operations[op_index - 1];
  val sender_account_id = ft4.auth.extract_account_id(auth_op);

  return (
    tx_rid = tx_rid,
    args = args,
    sender_account_id = sender_account_id
  );
}

function _ensure_visited_blockchains(token, blockchains: list<byte_array>) {
  for (blockchain in blockchains) {
    if (visited_blockchain @? { token, blockchain } == null) {
      create visited_blockchain ( token, blockchain );
    }
  }
}

query get_pending_transfers_for_account(account_id: byte_array) {
  return pending_transfer @? {
    .sender.id == account_id
  } (
    tx_data = .transaction.tx_data,
    op_index = .op_index
  );
}

entity applied_transfers {
  key init_tx_rid, init_op_index;
  init_tx_rid: byte_array;
  init_op_index: integer;
  transaction;
  op_index: integer;
}

entity canceled_transfers {
  key init_tx_rid, init_op_index;
  init_tx_rid: byte_array;
  init_op_index: integer;
}

entity unapplied_transfers {
  key init_tx_rid, init_op_index;
  init_tx_rid: byte_array;
  init_op_index: integer;
}

entity recalled_transfers {
  key init_tx_rid, init_op_index;
  init_tx_rid: byte_array;
  init_op_index: integer;
}

entity pending_transfer {
  key transaction, op_index;
  op_index: integer;
  index sender: ft4.accounts.account;
}

entity reverted_transfer {
  key init_tx_rid, init_op_index;
  init_tx_rid: byte_array;
  init_op_index: integer;
}
