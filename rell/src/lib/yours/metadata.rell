
/**
 * A single token's metadata. An extension of the ERC1155 Metadata standard.
 * 
 * Incomining should be used as operation input since map<text, gtv> is not serializable
 * without losing the name of the nested properties.
 */
struct token_metadata_incoming {
  name;
  properties: json;
  yours: yours_metadata;
}

/**
 * A single token's metadata. An extension of the ERC1155 Metadata standard.
 * 
 * Outgoing should be used as query output in order to preserve the name of the nested properties.
 */
struct token_metadata_outgoing {
  name;
  properties: map<text, gtv>;
  yours: yours_metadata;
}

/**
 * Yours specific metadata.
 */
struct yours_metadata {
  modules: list<name>;
  project: project_info;
  collection: name;
  type: name;
  blockchains: list<byte_array>;
}

/**
 * A single attribute of a token. Compatible with ERC721 OpenSea standard.
 */
struct token_attribute {
  trait_type: text;
  value: gtv;
}

/**
 * Get the metadata for a specific token. This function will gather metadata from the token's base metadata,
 * as well as the token's modules on this chain that supports it.
 *
 * @param token The token to get the metadata for.
 * @return token_metadata_outgoing The metadata for the token.
 */
function get_metadata(token): token_metadata_outgoing {
  val base_metadata = imported_attributes @? {
    token
  } ( _json_to_gtv_map ($.json) ) ?: map<text, gtv>();
  val metadata = populate_metadata(token, set(token_module @* { token } ( .module_name )));

  base_metadata.put_all(metadata);

  val project = token.collection.project;
  return token_metadata_outgoing(
    name = token.name,
    properties = base_metadata,
    yours = yours_metadata(
      collection = token.collection.name,
      project = project_info(
        name = project.name,
        blockchain_rid = project.blockchain_rid
      ),
      type = token.type.name,
      modules = token_module @* { token } ( .module_name ),
      blockchains = visited_blockchain @* { token } ( .blockchain_rid )
    )
  );
}

function _import_attributes(token: token, inc_attributes: map<text, gtv>) {
  // Clean properties that shouldn't be stored as attributes
  val name = inc_attributes.get_or_null("name");
  if (name != null) {
    val name_text = text.from_gtv(name);
    if (token.name != name_text) {
      token.name = name_text;
    }

    inc_attributes.remove("name");
  }

  val attributes = inc_attributes.to_gtv().to_json();

  val imported_attributes = imported_attributes @? { token };
  if (imported_attributes == null) {
    create imported_attributes ( token, attributes );
  } else {
    imported_attributes.json = attributes;
  }
}
