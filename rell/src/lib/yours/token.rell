
/**
 * The specification for a token.
 */
struct token_info {
  project: project_info;
  collection: name;
  type: token_type;
  name: name;
  modules: list<name>?;
}

struct token_dto {
  project: project_info;
  collection: name;
  token_id: big_integer;
  uid: byte_array;
  type: token_type;
}

/**
 * The specification for a project.
 */
struct project_info {
  name: name;
  blockchain_rid: byte_array;
}

/**
 * The specification for a balance mutation.
 */
struct balance_info {
  account: ft4.accounts.account;
  amount: big_integer;
}

/**
 * The specification for a transfer.
 */
struct transfer_info {
  from: ft4.accounts.account;
  to: ft4.accounts.account;
  amount: big_integer;
}

/**
 * Define a new token with a specific ID.
 *
 * @param info the information for the token
 * @param token_id the token id
 */
function create_token_with_id(info: token_info, token_id: big_integer): token {
  val project = ensure_project(info.project);
  val collection = ensure_collection(info.collection, project);
  return _create_token(info, collection, token_id);
}

/**
 * Define a new token on the blockchain.
 *
 * @param info the information for the token
 */
function create_token(info: token_info): token {
  val project = ensure_project(info.project);
  val collection = ensure_collection(info.collection, project);
  return _create_token(info, collection, _get_next_token_id(collection));
}

/**
 * Attach modules to a token.
 *
 * @param token to attach the modules to
 * @param modules to attach
 */
function attach_modules(token, modules: list<name>) {
  for (m in modules) {
    attach_module(token, m);
  }
}

/**
 * Attach a module to a token. Making it eligible to be part of the token's metadata.
 *
 * @param token to attach the module to
 * @param module_name to attach
 */
function attach_module(token, module_name: name) {
  val modules = module_name.split(".");
  val name = modules[modules.size() - 1];

  if (token_module @? { token, name } == null) {
    create token_module ( token, name );
  }
}

/**
 * Check if a token has a module.
 *
 * @param token to check
 * @param name of the module
 */
function has_module(token, name): boolean {
  return token_module @? { token, name } != null;
}

/**
 * Mint tokens to a specific account.
 *
 * @param token the token to mint from
 * @param info the information for the mint
 */
function mint(token, info: balance_info) {
  require(token.collection.project.blockchain_rid == chain_context.blockchain_rid, "This chain does not have permission to mint this token");
  require(token.type != token_type.external, "External tokens cannot be directly minted");
  _mint(token, info, null);
}

function _mint(token, info: balance_info, crosschain_source_blockchain_rid: byte_array?) {
  before_mint(token, info.account, info.amount);
  _mint_balance(token, info.account, info.amount, crosschain_source_blockchain_rid);
  after_mint(token, info.account, info.amount);
}

/**
 * Burn tokens from a specific account.
 *
 * @param token the token to burn from
 * @param info the information for the burn
 */
function burn(token, info: balance_info) {
  require(token.type != token_type.external, "External tokens cannot be directly burned");
  _burn(token, info, null);
}

function _burn(token, info: balance_info, crosschain_target_blockchain_rid: byte_array?) {
  before_burn(token, info.account, info.amount);
  _burn_balance(token, info.account, info.amount, crosschain_target_blockchain_rid);
  after_burn(token, info.account, info.amount);
}

/**
 * Transfer tokens from one account to another.
 *
 * @param token to transfer
 * @param info the information for the transfer
 */
function transfer(token, info: transfer_info) {
  require(token.type == token_type.yours, "Only tokens of type yours can be transferred");
  _transfer(token, info, null);
}

/**
 * Private function to transfer tokens, this function does not perform any checks.
 *
 * @param token to transfer
 * @param info the information for the transfer
 */
function _transfer(token, info: transfer_info, blockchain_rid: byte_array?) {
  before_transfer(token, info.from, info.to, info.amount);
  _burn_balance(token, info.from, info.amount, blockchain_rid);
  _mint_balance(token, info.to, info.amount, blockchain_rid);
  after_transfer(token, info.from, info.to, info.amount);
}

/**
 * Get a token by collection and token id.
 *
 * @param collection the collection name
 * @param token_id the token id
 */
function get_token(project_name: name, project_blockchain_rid: byte_array, collection: name, token_id: big_integer): token? {
  return token @? {
    .collection.project.name == project_name,
    .collection.project.blockchain_rid == project_blockchain_rid,
    .collection.name == collection,
    .id == token_id
  };
}

/**
 * Get a token by its unique id.
 *
 * @param uid the unique id
 */
function get_token_by_uid(uid: byte_array): token? {
  return token @? { .uid == uid };
}

/**
 * An active token is one where there exists a balance for the token.
 *
 * @param project_name the project name
 * @param project_blockchain_rid the project blockchain rid
 * @param collection the collection name
 * @param token_id the token id
 */
function get_active_token(project_name: name, project_blockchain_rid: byte_array, collection: name, token_id: big_integer): token? {
  return token_balance @? {
    .token.collection.project.name == project_name,
    .token.collection.project.blockchain_rid == project_blockchain_rid,
    .token.collection.name == collection,
    .token.id == token_id
  } ( .token ) limit 1;
}

/**
 * An active token is one where there exists a balance for the token.
 *
 * @param uid the unique id
 */
function get_active_token_by_uid(uid: byte_array): token? {
  return token_balance @? { .token.uid == uid } ( .token ) limit 1;
}

/**
 * Get the balance of a token for a specific account.
 *
 * @param token the token to get the balance for
 * @param account the account to get the balance for
 */
function get_balance(token, account: ft4.accounts.account): big_integer {
  return token_balance @? { token, account } ( .amount ) ?: 0L;
}

function _create_token(info: token_info, collection, token_id: big_integer) {
  val token = create token (
    info.name,
    collection,
    info.type,
    token_id,
    uid = generate_unique_id(info.project, collection.name, token_id),
    decimals = 0
  );

  create visited_blockchain ( token, chain_context.blockchain_rid );

  val modules = info.modules;
  if (modules != null) {
    for (m in modules) {
      attach_module(token, m);
    }
  }

  return token;
}

function _get_next_token_id(collection): big_integer {
  return (token @? { collection } ( @max(.id) ) ?: -1L) + 1L;
}

function _get_token_balance(token, ft4.accounts.account) {
  return token_balance @? { token, account };
}

function _mint_balance(token, ft4.accounts.account, amount: big_integer, blockchain_rid: byte_array?) {
  val receiver_balance = _get_token_balance(token, account);
  if (receiver_balance == null) {
    create token_balance ( token, account, amount );
  } else {
    receiver_balance.amount += amount;
  }

  if (blockchain_rid != null) {
    log_crosschain_transfer_history_entry(token, account, amount, transfer_type.received, blockchain_rid);
  } else {
    log_transfer_history_entry(token, account, amount, transfer_type.received);
  }
}

function _burn_balance(token, ft4.accounts.account, amount: big_integer, blockchain_rid: byte_array?) {
  val token_balance = require(_get_token_balance(token, account), "Insufficient balance of %s, no balance found for: %s".format(token.id, account.id.to_hex()));
  val new_amount = token_balance.amount - amount;
  require(new_amount >= 0L, "Insufficient balance of %s %s/%s".format(token.id, token_balance.amount, amount));

  if (new_amount == 0) {
    delete token_balance;
  } else {
    token_balance.amount = new_amount;
  }

  if (blockchain_rid != null) {
    log_crosschain_transfer_history_entry(token, account, amount, transfer_type.sent, blockchain_rid);
  } else {
    log_transfer_history_entry(token, account, amount, transfer_type.sent);
  }
}
